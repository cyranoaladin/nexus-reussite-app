// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// √ânum√©ration des r√¥les utilisateur
enum UserRole {
  ADMIN
  ASSISTANTE
  COACH
  PARENT
  ELEVE
}

// √ânum√©ration des statuts d'abonnement
enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
}

// √ânum√©ration des types de prestations
enum ServiceType {
  COURS_ONLINE
  COURS_PRESENTIEL
  ATELIER_GROUPE
}

// √ânum√©ration des mati√®res
enum Subject {
  MATHEMATIQUES
  NSI
  FRANCAIS
  PHILOSOPHIE
  HISTOIRE_GEO
  ANGLAIS
  ESPAGNOL
  PHYSIQUE_CHIMIE
  SVT
  SES
}

// √ânum√©ration des statuts de session
enum SessionStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

// √ânum√©ration des types de paiement
enum PaymentType {
  SUBSCRIPTION
  CREDIT_PACK
  SPECIAL_PACK
}

// √ânum√©ration des statuts de paiement
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Mod√®le Utilisateur principal
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  role      UserRole
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations sp√©cifiques selon le r√¥le
  parentProfile ParentProfile?
  studentProfile StudentProfile?
  student Student?
  coachProfile CoachProfile?

  // Relations communes
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  payments         Payment[]
  
  @@map("users")
}

// Profil Parent
model ParentProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Informations sp√©cifiques parent
  address String?
  city    String?
  country String? @default("Tunisie")

  // Relations
  children Student[]

  @@map("parent_profiles")
}

// Profil √âl√®ve
model StudentProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Informations scolaires
  grade        String? // Classe (Seconde, Premi√®re, Terminale)
  school       String?
  birthDate    DateTime?
  
  @@map("student_profiles")
}

// Mod√®le √âl√®ve (entit√© m√©tier)
model Student {
  id       String @id @default(cuid())
  parentId String
  parent   ParentProfile @relation(fields: [parentId], references: [id], onDelete: Cascade)
  
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Informations scolaires
  grade     String? // Classe
  school    String?
  birthDate DateTime?

  // Relations
  subscriptions    Subscription[]
  creditTransactions CreditTransaction[]
  sessions         Session[]
  ariaConversations AriaConversation[]
  badges           StudentBadge[]
  reports          StudentReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("students")
}

// Profil Coach
model CoachProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Informations professionnelles
  title       String? // Agr√©g√©, Certifi√©, etc.
  pseudonym   String  @unique // H√©lios, Z√©non, etc.
  tag         String? // üéì Agr√©g√©, üéØ Strat√®ge, etc.
  description String?
  philosophy  String? @db.Text
  expertise   String? @db.Text
  
  // Sp√©cialit√©s
  subjects    Subject[]
  
  // Disponibilit√©s
  availableOnline     Boolean @default(true)
  availableInPerson   Boolean @default(true)
  
  // Relations
  sessions    Session[]
  reports     StudentReport[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coach_profiles")
}

// Mod√®le Abonnement
model Subscription {
  id        String             @id @default(cuid())
  studentId String
  student   Student            @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  // D√©tails de l'abonnement
  planName      String // ACCES_PLATEFORME, HYBRIDE, IMMERSION
  monthlyPrice  Int    // Prix en TND
  creditsPerMonth Int  // Cr√©dits inclus par mois
  
  // Statut et dates
  status    SubscriptionStatus
  startDate DateTime
  endDate   DateTime?
  
  // Add-ons ARIA
  ariaSubjects Subject[] // Mati√®res ARIA activ√©es
  ariaCost     Int       @default(0) // Co√ªt mensuel des add-ons ARIA
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

// Mod√®le Transaction de Cr√©dits
model CreditTransaction {
  id        String @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  // D√©tails de la transaction
  type        String // MONTHLY_ALLOCATION, PURCHASE, USAGE, REFUND, EXPIRATION
  amount      Float  // Peut √™tre n√©gatif pour les utilisations
  description String
  
  // M√©tadonn√©es
  sessionId   String? // Si li√© √† une session
  expiresAt   DateTime? // Pour les cr√©dits avec expiration
  
  createdAt DateTime @default(now())

  @@map("credit_transactions")
}

// Mod√®le Session (Cours/Ateliers)
model Session {
  id        String @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  coachId String
  coach   CoachProfile @relation(fields: [coachId], references: [id])
  
  // D√©tails de la session
  type        ServiceType
  subject     Subject
  title       String
  description String?
  
  // Planification
  scheduledAt DateTime
  duration    Int      // Dur√©e en minutes
  location    String?  // Pour le pr√©sentiel ou lien visio
  
  // Co√ªt et statut
  creditCost Float
  status     SessionStatus @default(SCHEDULED)
  
  // Compte-rendu
  report      String? @db.Text
  reportedAt  DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

// Mod√®le Conversation ARIA
model AriaConversation {
  id        String @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  subject   Subject
  title     String?
  
  messages  AriaMessage[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("aria_conversations")
}

// Mod√®le Message ARIA
model AriaMessage {
  id             String @id @default(cuid())
  conversationId String
  conversation   AriaConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  role    String // "user" ou "assistant"
  content String @db.Text
  
  // Feedback utilisateur
  feedback Boolean? // true = üëç, false = üëé, null = pas de feedback
  
  createdAt DateTime @default(now())

  @@map("aria_messages")
}

// Mod√®le Badge
model Badge {
  id          String @id @default(cuid())
  name        String @unique
  description String
  category    String // ASSIDUITE, PROGRESSION, CURIOSITE
  icon        String?
  condition   String @db.Text // Condition d'obtention
  
  // Relations
  studentBadges StudentBadge[]
  
  createdAt DateTime @default(now())

  @@map("badges")
}

// Mod√®le Attribution de Badge
model StudentBadge {
  id        String @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  badgeId String
  badge   Badge  @relation(fields: [badgeId], references: [id])
  
  earnedAt DateTime @default(now())

  @@unique([studentId, badgeId])
  @@map("student_badges")
}

// Mod√®le Rapport √âl√®ve
model StudentReport {
  id        String @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  coachId String
  coach   CoachProfile @relation(fields: [coachId], references: [id])
  
  // Contenu du rapport
  title       String
  content     String @db.Text
  period      String // "Semaine du X", "Mois de Y", etc.
  
  // M√©triques
  sessionsCount    Int     @default(0)
  averageGrade     Float?
  progressNotes    String? @db.Text
  recommendations  String? @db.Text
  
  createdAt DateTime @default(now())

  @@map("student_reports")
}

// Mod√®le Paiement
model Payment {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  // D√©tails du paiement
  type        PaymentType
  amount      Float
  currency    String @default("TND")
  description String
  
  // Statut et m√©thode
  status PaymentStatus @default(PENDING)
  method String? // "konnect", "wise", "manual"
  
  // M√©tadonn√©es
  externalId String? // ID de transaction externe
  metadata   Json?   // Donn√©es suppl√©mentaires
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

// Mod√®le Message (Chat)
model Message {
  id         String @id @default(cuid())
  senderId   String
  sender     User   @relation("MessageSender", fields: [senderId], references: [id])
  
  receiverId String
  receiver   User   @relation("MessageReceiver", fields: [receiverId], references: [id])
  
  content    String @db.Text
  fileUrl    String? // Pour les pi√®ces jointes
  fileName   String?
  
  readAt     DateTime?
  
  createdAt  DateTime @default(now())

  @@map("messages")
}

// Mod√®le Contenu P√©dagogique (pour ARIA)
model PedagogicalContent {
  id      String  @id @default(cuid())
  title   String
  content String  @db.Text
  subject Subject
  grade   String? // Niveau scolaire
  
  // M√©tadonn√©es pour la recherche vectorielle
  embedding Float[] // Vecteur d'embedding pour RAG
  tags      String[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pedagogical_contents")
}